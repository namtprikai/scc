openapi: 3.0.0
info:
  description: Mock API for vue-typescript-admin-template.
  version: 1.0.0
  title: Mock API
  contact:
    email: armourcy@email.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /api
tags:
  - name: products
    description: products related api.
  - name: roles
    description: Roles related api.
  - name: users
    description: Users related api.
  - name: admins
    description: Admins related api.
  - name: categorys
    description: Categorys related api.
paths:
  /products:
    get:
      tags:
        - products
      summary: Get product List
      description: Return a list of products.
      operationId: getProducts
      security:
        - AccessTokenAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
  /roles:
    get:
      tags:
        - roles
      summary: Get Role List
      description: Return a list of roles.
      operationId: getRoles
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int32
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
    post:
      tags:
        - roles
      summary: Create New Role
      description: Create a new role.
      operationId: createRole
      security:
        - AccessTokenAuth: []
      parameters:
        - name: role
          in: query
          required: true
          description: The data for new role.
          schema:
            $ref: '#/components/schemas/Role'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      key:
                        type: integer
                        format: int64
        401:
          $ref: '#/components/responses/Unauthorized'
  /roles/{id}:
    put:
      tags:
        - roles
      summary: Update Role Detail
      description: Update role deatail by ID.
      operationId: updateRole
      security:
        - AccessTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role id (key).
          schema:
            type: integer
            format: int64
        - name: role
          in: query
          required: true
          description: The data for updated role.
          schema:
            $ref: '#/components/schemas/Role'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      role:
                        $ref: '#/components/schemas/Role'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - roles
      summary: Delete Role
      description: Delete role by ID.
      operationId: deleteRole
      security:
        - AccessTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Role id (key).
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /ansers/{question_id}:
    get:
      tags:
        - ansers
      summary: Get user by user name
      description: Get user by user name.
      operationId: getAnsers
      security:
        - AccessTokenAuth: []
      parameters:
        - name: question_id
          in: path
          required: true
          description: The id that needs to be fetched.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      ansers:
                        type: array
                      flow:
                        type: object
        400:
          $ref: '#/components/responses/InvalidAdmin'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  # getPolicyGroupByAdminId
  /policygroup/{admin_id}:
    get:
      tags:
        - policyGroup
      summary: Get user by user name
      description: Get user by user name.
      operationId: getPolicyGroupByAdminId
      security:
        - AccessTokenAuth: []
      parameters:
        - name: admin_id
          in: path
          required: true
          description: The id that needs to be fetched.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object

        400:
          $ref: '#/components/responses/InvalidAdmin'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /admin:
    get:
      tags:
        - admins
      summary: Get admin list
      description: Return a list of users
      operationId: getAdmins
      security:
        - AccessTokenAuth: []
      parameters:
        # - name: name
        #   in: query
        #   description: Used to filter users by matched username substring
        #   schema:
        #     type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Admin'
        401:
          $ref: '#/components/responses/Unauthorized'
  /admin/login:
    post:
      tags:
        - admins
      summary: Logs user into the system
      description: Use username and password to login.
      operationId: loginAdmin
      parameters:
        - name: email
          in: query
          required: true
          description: The user name for login.
          schema:
            $ref: '#/components/schemas/Admin/properties/email'
        - name: password
          in: query
          required: true
          description: The password for login in clear text.
          schema:
            $ref: '#/components/schemas/Admin/properties/password'
      responses:
        200:
          description: OK
          headers:
            X-Rate-Limit:
              schema:
                type: integer
                format: int32
              description: calls per hour allowed by the user.
            X-Expires-After:
              schema:
                type: string
                format: date-time
              description: date in UTC when token expires.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: admin-token
        400:
          $ref: '#/components/responses/InvalidUser'
  /admin/logout:
    post:
      tags:
        - admins
      summary: Logs out current logged in adminuser session
      description: Log out current session.
      operationId: logoutAdmin
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
  /admin/{id}:
    get:
      tags:
        - admins
      summary: Get user by user name
      description: Get user by user name.
      operationId: getAdminById
      security:
        - AccessTokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The id that needs to be fetched.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/Admin'
        400:
          $ref: '#/components/responses/InvalidAdmin'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - AccessTokenAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Name that need to be updated.
          schema:
            type: string
        - name: user
          in: query
          required: true
          description: The data for updated user.
          schema:
            $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      security:
        - AccessTokenAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: The name that needs to be deleted.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /admininfo:
    get:
      tags:
        - admins
      summary: Get current user info
      description: This can only be done by the logged in user.
      operationId: getAdminInfo
      security:
        - AccessTokenAuth: []
      parameters:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      admin:
                        $ref: '#/components/schemas/Admin'
        401:
          $ref: '#/components/responses/Unauthorized'
  /admin/{admin_id}/product:
    get:
      tags:
        - admins
      summary: Get current user info
      description: This can only be done by the logged in user.
      operationId: getProductsByAdminId
      security:
        - AccessTokenAuth: []
      parameters:
        - name: admin_id
          in: path
          required: true
          description: The name that needs to be deleted.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      admin:
                        $ref: '#/components/schemas/Product'
        401:
          $ref: '#/components/responses/Unauthorized'
  /product/{product_id}/role/{role_id}/category:
    get:
      tags:
        - category
      summary: Get users list
      description: Return a list of users
      operationId: getCategorys
      security:
        - AccessTokenAuth: []
      parameters:
        - name: product_id
          in: path
          description: 該当プロダクトIDのカテゴリのみ
          schema:
            type: string
        - name: role_id
          in: path
          description: 該当RoleIDのカテゴリのみ
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        401:
          $ref: '#/components/responses/Unauthorized'
  /questions:
    get:
      tags:
        - question
      summary: Get users list
      description: Return a list of users
      operationId: getQuestionList
      security:
        - AccessTokenAuth: []
      parameters:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
        401:
          $ref: '#/components/responses/Unauthorized'
  /users:
    get:
      tags:
        - users
      summary: Get users list
      description: Return a list of users
      operationId: getUsers
      security:
        - AccessTokenAuth: []
      parameters:
        - name: name
          in: query
          description: Used to filter users by matched username substring
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/register:
    post:
      tags:
        - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: register
      parameters:
        - name: user
          in: query
          required: true
          description: The data for created user.
          schema:
            $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: Use username and password to login.
      operationId: loginUser
      parameters:
        - name: name
          in: query
          required: true
          description: The user name for login.
          schema:
            $ref: '#/components/schemas/User/properties/name'
        - name: password
          in: query
          required: true
          description: The password for login in clear text.
          schema:
            $ref: '#/components/schemas/User/properties/password'
      responses:
        200:
          description: OK
          headers:
            X-Rate-Limit:
              schema:
                type: integer
                format: int32
              description: calls per hour allowed by the user.
            X-Expires-After:
              schema:
                type: string
                format: date-time
              description: date in UTC when token expires.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: admin-token
        400:
          $ref: '#/components/responses/InvalidUser'
  /users/logout:
    post:
      tags:
        - users
      summary: Logs out current logged in user session
      description: Log out current session.
      operationId: logoutUser
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by user name
      description: Get user by user name.
      operationId: getUserById
      security:
        - AccessTokenAuth: []
      x-middleware:
        - validation
      parameters:
        - name: id
          in: path
          required: true
          description: The id that needs to be fetched.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security:
        - AccessTokenAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Name that need to be updated.
          schema:
            type: string
        - name: user
          in: query
          required: true
          description: The data for updated user.
          schema:
            $ref: "#/components/schemas/User"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      security:
        - AccessTokenAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: The name that needs to be deleted.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
        400:
          $ref: '#/components/responses/InvalidUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  /users/info:
    get:
      tags:
        - users
      summary: Get current user info
      description: This can only be done by the logged in user.
      operationId: getUserInfo
      security:
        - AccessTokenAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
components:
  securitySchemes:
    AccessTokenAuth:
      type: apiKey
      in: header
      name: X-Access-Token
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidUser:
      description: Invalid username supplied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: chat
        config:
          type: string
          example: json
        routes:
          $ref: '#/components/schemas/AnyValue'
      required:
        - id
        - name
    Role:
      type: object
      properties:
        key:
          type: string
          example: admin
        name:
          type: string
          example: admin
        description:
          type: string
          example: Super Administrator. Have access to view all pages.
        routes:
          $ref: '#/components/schemas/AnyValue'
      required:
        - key
        - name
        - routes
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
          example: man
        conditiongroup_id:
          type: integer
          format: int64
        required:
          - id
          - label
          - conditiongroup_id
    Anser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
          example: Armour
        question_id:
          type: string
          example: Armour
        is_public:
          type: integer
          format: int64
        required:
          - id
          - text
    Admin:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Armour
        email:
          type: string
          example: Armour
        password:
          type: string
          example: Abc123@
        required:
          - id
          - name
          - password
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        password:
          type: string
          example: 12345678
        name:
          type: string
          example: Chong Guo
        email:
          type: string
          example: armourcy@gmail.com
      required:
        - id
        - name
    Question:
      type: object
      id:
        type: integer
        format: int64
      title:
        type: string
      label:
        type: string
      is_public:
        type: integer
        format: int32
      required:
        - id
        - title
    Answer:
      type: object
      id:
        type: integer
        format: int64
      question_id:
        type: integer
        format: int64
      text:
        type: string
      required:
        - id
        - title
    PolycyGroup:
      type: object
      id:
        type: integer
        format: int64
      label:
        type: string
      config:
        type: object
      required:
        - id
        - title
    Timestamp:
      oneOf:
      - type: integer
        format: int32
        example: 1559605283
      - type: string
        format: date-time
        example: 2017-07-21T17:32:28Z
    AnyValue: {}
